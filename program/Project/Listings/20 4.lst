C51 COMPILER V9.54   20_4                                                                  05/29/2017 11:49:00 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE 20_4
OBJECT MODULE PLACED IN .\Objects\20 4.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE codes\20 4.c OPTIMIZE(8,SPEED) BROWSE INCDIR(..\Headers) DEBUG OBJECTEXT
                    -END PRINT(.\Listings\20 4.lst) TABS(2) OBJECT(.\Objects\20 4.obj)

line level    source

   1          // wirtten by Yarin Avisidris & Idan Lisha and guided by Ludmila koz
   2          #include "REG_89C51.h"
   3          #include "general.h"
   4          #include "lcdp2.h"
   5          #define bit_IR P3_7
   6          bit flag=0;
   7          sbit trig=P3^6;
   8          sbit echo=P3^3; // echo=gate=p3.3
   9          byte data arr_remote[4];
  10          uint time,dist;
  11          //=================== ULTRASONIC SENSOR INTERRUPTS AND FUNTIONS================
  12          void us_trig() {// trigger function for ultrasonic sensor
  13   1         trig=1;
  14   1         nop();nop();nop();// delay of  14us requirements are atleast 10us for sr_04 Trigger
  15   1         trig=0;
  16   1        msec(50);
  17   1      }// end trigger
  18          void distance() interrupt 2 { // interrupt function (echo falls int1 interrupt)
  19   1        time =TH1;
  20   1        time =time<<8;//shift left 8
  21   1        time =time|TL1; //
  22   1        dist=time/58;
  23   1        TH1=TL1=0;
  24   1        flag=1;
  25   1      }
  26          //======================END OF ULTRASONIC SENSOR INTERRUPTS AND FUNCTIONS======
  27          //====================================REMOTE IR FUNCTION=============================
  28          
  29          bit remote()
  30          {
  31   1        byte data num,num_bit,len_arr;
  32   1        uint data time_units;
  33   1        //=========== 16T =============//
  34   1      
  35   1        TL1=TH1=0;
  36   1        TR1=1;  
  37   1        while(!bit_IR);//bit_IR up
  38   1          TR1=0; //stop timer
  39   1        time_units =TH1;
  40   1        time_units =time_units <<8;//shift left 8
  41   1          time_units =time_units |TL1; //
  42   1          if(time_units <11060 && time_units >6248)// check 16T
  43   1        {
  44   2           //============= 8T =============// 
  45   2          TL1=TH1=0;
  46   2           TR1=1; 
  47   2          while(bit_IR);//bit_IR down
  48   2            TR1=0; //stop timer
  49   2          time_units =TH1;
  50   2          time_units =time_units <<8;
  51   2          time_units =time_units |TL1;  
  52   2          if(time_units <6248 && time_units >3124)
  53   2          { 
  54   3           //========= start of transmitting(DATA) =========//
C51 COMPILER V9.54   20_4                                                                  05/29/2017 11:49:00 PAGE 2   

  55   3            for(len_arr=0;len_arr<4;len_arr++)  
  56   3                {
  57   4              num=0;  
  58   4                  for(num_bit=0;num_bit<8;num_bit++)
  59   4                {//==== 1T =======//  
  60   5                        while(!bit_IR);//bit_IR up                
  61   5                //===== 3T ======//
  62   5                  TL1=TH1=0;
  63   5                  TR1=1;
  64   5                   while(bit_IR); //bit_IR down
  65   5                    TR1=0; //stop timer
  66   5                  time_units =TH1;
  67   5                    time_units =time_units <<8;
  68   5                    time_units =time_units |TL1;
  69   5                       if(time_units <1823 && time_units >1041)//3t
  70   5                       num|=1<<num_bit;   
  71   5              }//for8                       
  72   4                    arr_remote[len_arr]=num;
  73   4            }//for4   
  74   3          if(arr_remote[0]==~arr_remote[1]) //address && !address
  75   3                if(arr_remote[2]==~arr_remote[3])
  76   3                  return 1;
  77   3          return 0;  
  78   3           } // 8t
  79   2            return 0 ;
  80   2             }//16t check
  81   1           return 0;
  82   1      }
  83          //====================================== END OF REMOTE FUNCTION================
  84          //============================== Start of DC motors functions=====================
  85          void forward()
  86          {
  87   1        P1_0=0; P1_2=1;
  88   1        P1_1=1; P1_3=0;
  89   1      
  90   1      }
  91          void backward() {
  92   1        P1_0=1; P1_2=0;
  93   1        P1_1=0; P1_3=1;
  94   1      
  95   1      }
  96          void left() {
  97   1        P1_0=1; P1_2=1;
  98   1        P1_1=0; P1_3=0;
  99   1      
 100   1      }
 101          void right() {
 102   1        P1_0=0; P1_2=0;
 103   1        P1_1=1; P1_3=1;
 104   1      
 105   1        
 106   1      }
 107          void motorstop() {
 108   1        P1_0=0; P1_2=0;
 109   1        P1_1=0; P1_3=0;
 110   1        
 111   1      }
 112          void servo_x(bit control) {
 113   1        if(control==1 & CCAP2H>230 ) CCAP2H--; // 1 LOGIC AT CONTROL IS ADDIN ANGLE
 114   1        if(control==0 & CCAP2H<244 ) CCAP2H++; // 0 LOGIC AT CONTROL IS SUB ANGLE
 115   1        } 
 116          void servo_y(bit control) {
C51 COMPILER V9.54   20_4                                                                  05/29/2017 11:49:00 PAGE 3   

 117   1        if(control==1 & CCAP3H>230 ) CCAP3H--; // 1 LOGIC AT CONTROL IS ADDIN ANGLE
 118   1        if(control==0 & CCAP3H<244 ) CCAP3H++; // 0 LOGIC AT CONTROL IS SUB ANGLE
 119   1        }
 120          void servo_init() {
 121   1        CCAP1H=244;
 122   1        CCAP2H=238;
 123   1        CCAP3H=244;
 124   1        CCAP4H=244;
 125   1      }
 126          //============================= end of DC Motors functions==========================
 127          void main()
 128          { 
 129   1      
 130   1        bit A=0;
 131   1        byte f;
 132   1        byte prev=10000;
 133   1        init_lcd();
 134   1        servo_init();
 135   1        start:
 136   1        TMOD=0x12;//timer 0 8 bit auto reload pwm for servo motor, timer1 mode1(ir config)
 137   1          TH0=0xB8;
 138   1        TL0=0xB8;
 139   1        TR0=1;
 140   1        CCAPM1=0x42;
 141   1        CCAPM2=0x42;
 142   1        CCAPM3=0x42;
 143   1        CCAPM4=0x42;
 144   1        CMOD=4;
 145   1        CCON=0x40;
 146   1        while(bit_IR) lcd_puts(0x84,"IR wait");//waiting for steady mode to fall (start of comm) 
 147   1          lcd_clr();
 148   1           while(1)
 149   1           {
 150   2             if(remote()){
 151   3              switch(arr_remote[2]) {
 152   4                case _plus: lcd_clr();forward(); break;
 153   4                case _minus: lcd_clr(); backward();break;
 154   4                case _play: lcd_clr(); motorstop();break;
 155   4                case _left: lcd_clr(); left();break;
 156   4                case _right: lcd_clr(); right();break;
 157   4                case _6:  lcd_clr();  servo_x(1); break;
 158   4                case _4: lcd_clr(); servo_x(0); break;
 159   4                case _5: lcd_clr(); 
 160   4                          if(CCAP4H==244) CCAP4H=230; else CCAP4H=244; break; // open/close 
 161   4                case _2: lcd_clr(); servo_y(0); break;
 162   4                case _8: lcd_clr(); servo_y(1); break;    
 163   4                case _spin: if(CCAP1H==244) CCAP1H=234; else CCAP1H=244; break;         
 164   4                case _test: lcd_clr();   TMOD=0x92;//timer 1 int1 interrupt for ultrasonic timer0 8bit autoreload for
             - pwm
 165   4                  EX1=1; //enabling interrupt 1
 166   4                  TR1=1; // running timer 1, timer runs when gate is 1.
 167   4                  IT1=1; // falling edge interrupt 1
 168   4                  EA=1; // enabling all interrupts
 169   4                  TL1=TH1=0;
 170   4                  CCAP2H=238; // arm in middle
 171   4      //          forward();
 172   4      //          control();
 173   4      //          while(1) {
 174   4      //            
 175   4      //                        us_trig();
 176   4      //            while(!flag);
 177   4      //            flag=0;
C51 COMPILER V9.54   20_4                                                                  05/29/2017 11:49:00 PAGE 4   

 178   4      //  set_lcd(0,0x85);
 179   4      //  set_lcd(1,dist/100+0x30);
 180   4      //  dist=dist%100;
 181   4      //  set_lcd(1,dist/10+0x30);
 182   4      //  set_lcd(1,dist%10+0x30);
 183   4      //          }
 184   4      
 185   4                              while(1) {
 186   5                                A=0;
 187   5                                while(A==0) { 
 188   6                  if(dist<=20) {
 189   7                  A=1;
 190   7                  motorstop();
 191   7                  }
 192   6                  if(A==0) {            
 193   7                  forward();
 194   7                  msec(400);
 195   7                  motorstop();
 196   7                  }
 197   6                  us_trig();
 198   6                  while(!flag);
 199   6                  flag=0;
 200   6                  if(dist<=20 & A==0) {
 201   7                    lcd_puts(0x84,"B");
 202   7                  A=1;
 203   7                  }
 204   6                  
 205   6          
 206   6                     if(A==0) {
 207   7                    CCAP1H=234;
 208   7                  msec(400);
 209   7                  us_trig();
 210   7                  while(!flag);
 211   7                  flag=0;
 212   7                  if(dist>40) {
 213   8                    //FINDING EXIT AT LEFT
 214   8                    //AND EXITING THE ROOM 
 215   8                    //FROM THE LEFT
 216   8                    forward();
 217   8                    msec(600);
 218   8                    left();
 219   8                    msec(1000);
 220   8                    motorstop();
 221   8                    forward();
 222   8                    msec(2200);
 223   8                    motorstop();
 224   8                    lcd_puts(0x84,"I exited the room !");
 225   8                    goto start;
 226   8                  }
 227   7                  ///////
 228   7                  ///////           MOVING STRAIGHT CONTROL 
 229   7                  ///////
 230   7                  ///////
 231   7                  if(dist<=15) {
 232   8                    right();
 233   8                      while(dist<=prev) {
 234   9                    us_trig();
 235   9                  while(!flag);
 236   9                  flag=0;
 237   9                    prev=dist;
 238   9                  us_trig();
 239   9                  while(!flag);
C51 COMPILER V9.54   20_4                                                                  05/29/2017 11:49:00 PAGE 5   

 240   9                  flag=0;
 241   9                    }
 242   8                    
 243   8                  }
 244   7                  if(dist>=13) {
 245   8                   left();              
 246   8                    while(dist>=prev) {
 247   9                    us_trig();
 248   9                  while(!flag);
 249   9                  flag=0;
 250   9                    prev=dist;
 251   9                  us_trig();
 252   9                  while(!flag);
 253   9                  flag=0;
 254   9                    }
 255   8                  
 256   8                  }
 257   7                }
 258   6                  //msec(500);
 259   6                  CCAP1H=244;
 260   6                msec(100);
 261   6                
 262   6              }
 263   5                  
 264   5                
 265   5                  
 266   5                  ///// this is for EDGE solving when the car needs to rotate right with controll
 267   5                  /////
 268   5                
 269   5                  if(A==1) {
 270   6                  CCAP1H=234;
 271   6                  msec(250);
 272   6                  }
 273   5                  while(A==1 ) {
 274   6                    f=0;
 275   6                    right();
 276   6                    lcd_puts(0x84,"C");
 277   6                    
 278   6                    while(f<2) {
 279   7                    us_trig();
 280   7                  while(!flag);
 281   7                  flag=0;
 282   7                    prev=dist;
 283   7                    
 284   7                  us_trig();
 285   7                  while(!flag);
 286   7                  flag=0;
 287   7                      if(dist>prev) f++;
 288   7                    }
 289   6                    CCAP1H=244;
 290   6                    A=0;
 291   6                    motorstop();
 292   6                  }
 293   5                }// end while(1) automatic
 294   4                }
 295   3                  
 296   3                  
 297   3                  
 298   3        
 299   3                    
 300   3                    
 301   3                    
C51 COMPILER V9.54   20_4                                                                  05/29/2017 11:49:00 PAGE 6   

 302   3      
 303   3              }
 304   2            }
 305   1          }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1287    ----
   CONSTANT SIZE    =     32    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      8       7
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1       5
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
